#include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <stdbool.h>

#define MAX_REQUESTS 100

void fcfs(int requests[], int num_requests, int head) {
    int total_movement = 0;
    int curr_track = head;
    int i;

    printf("FCFS Disk Scheduling Algorithm\n");
    printf("Sequence: %d ", curr_track);

    for (i = 0; i < num_requests; i++) {
        int distance = abs(requests[i] - curr_track);
        total_movement += distance;
        curr_track = requests[i];
        printf("%d ", curr_track);
    }

    printf("\nTotal Head Movement: %d\n\n", total_movement);
}

void sstf(int requests[], int num_requests, int head) {
    int total_movement = 0;
    int curr_track = head;
    bool visited[MAX_REQUESTS] = { false };
    int i, j;

    printf("SSTF Disk Scheduling Algorithm\n");
    printf("Sequence: %d ", curr_track);

    for (i = 0; i < num_requests; i++) {
        int min_distance = INT_MAX;
        int next_track;

        for (j = 0; j < num_requests; j++) {
            if (!visited[j]) {
                int distance = abs(requests[j] - curr_track);
                if (distance < min_distance) {
                    min_distance = distance;
                    next_track = requests[j];
                }
            }
        }

        visited[next_track] = true;
        total_movement += min_distance;
        curr_track = next_track;
        printf("%d ", curr_track);
    }

    printf("\nTotal Head Movement: %d\n\n", total_movement);
}

void scan(int requests[], int num_requests, int head, int num_tracks) {
    int total_movement = 0;
    int curr_track = head;
    int i, j;
    int direction = 1;

    printf("SCAN Disk Scheduling Algorithm\n");
    printf("Sequence: %d ", curr_track);

    while (direction) {
        direction = 0;

        for (i = 0; i < num_requests; i++) {
            if ((requests[i] < curr_track && direction == -1) ||
                (requests[i] > curr_track && direction == 1)) {
                continue;
            }

            if (requests[i] > num_tracks) {
                continue;
            }

            total_movement += abs(requests[i] - curr_track);
            curr_track = requests[i];
            printf("%d ", curr_track);
            requests[i] = -1;
            direction = 1;
        }

        if (direction) {
            direction = -1;
        }
    }

    printf("\nTotal Head Movement: %d\n\n", total_movement);
}

void cscan(int requests[], int num_requests, int head, int num_tracks) {
    int total_movement = 0;
    int curr_track = head;
    int i, j;

    printf("C-SCAN Disk Scheduling Algorithm\n");
    printf("Sequence: %d ", curr_track);

    for (i = 0; i < num_requests; i++) {
        if (requests[i] < curr_track) {
            continue;
        }

        total_movement += abs(requests[i] - curr_track);
        curr_track = requests[i];
        printf("%d ", curr_track);
        requests[i] = -1;
    }

    total_movement += abs(num_tracks - curr_track);
    curr_track = 0;
    printf("%d ", curr_track);

    for (i = 0; i < num_requests; i++) {
        if (requests[i] == -1) {
            continue;
        }

        total_movement += abs(requests[i] - curr_track);
        curr_track = requests[i];
        printf("%d ", curr_track);
    }

    printf("\nTotal Head Movement: %d\n\n", total_movement);
}

void look(int requests[], int num_requests, int head) {
    int total_movement = 0;
    int curr_track = head;
    bool visited[MAX_REQUESTS] = { false };
    int i, j;
    int direction = 1;

    printf("LOOK Disk Scheduling Algorithm\n");
    printf("Sequence: %d ", curr_track);

    while (direction) {
        direction = 0;

        for (i = 0; i < num_requests; i++) {
            if ((requests[i] < curr_track && direction == -1) ||
                (requests[i] > curr_track && direction == 1)) {
                continue;
            }

            total_movement += abs(requests[i] - curr_track);
            curr_track = requests[i];
            printf("%d ", curr_track);
            visited[i] = true;
            direction = 1;
        }

        if (direction) {
            direction = -1;
        }
    }

    printf("\nTotal Head Movement: %d\n\n", total_movement);
}

void clook(int requests[], int num_requests, int head) {
    int total_movement = 0;
    int curr_track = head;
    int i, j;

    printf("C-LOOK Disk Scheduling Algorithm\n");
    printf("Sequence: %d ", curr_track);

    for (i = 0; i < num_requests; i++) {
        if (requests[i] < curr_track) {
            continue;
        }

        total_movement += abs(requests[i] - curr_track);
        curr_track = requests[i];
        printf("%d ", curr_track);
        requests[i] = -1;
    }

    for (i = 0; i < num_requests; i++) {
        if (requests[i] == -1) {
            continue;
        }

        total_movement += abs(requests[i] - curr_track);
        curr_track = requests[i];
        printf("%d ", curr_track);
    }

    printf("\nTotal Head Movement: %d\n\n", total_movement);
}

int main() {
    int requests[MAX_REQUESTS];
    int num_requests, head, i;

    printf("Enter the number of requests: ");
    scanf("%d", &num_requests);

    printf("Enter the request sequence: ");
    for (i = 0; i < num_requests; i++) {
        scanf("%d", &requests[i]);
    }

    printf("Enter the initial head position: ");
    scanf("%d", &head);

    printf("\n");

    fcfs(requests, num_requests, head);
    sstf(requests, num_requests, head);
    scan(requests, num_requests, head, 199);
    cscan(requests, num_requests, head, 199);
    look(requests, num_requests, head);
    clook(requests, num_requests, head);

    return 0;
    }







    #include <stdio.h>
#include <stdlib.h>
#include <limits.h>
#include <stdbool.h>

#define MAX_REQUESTS 100

void fcfs(int requests[], int num_requests, int head) {
    int total_movement = 0;
    int curr_track = head;
    int i;

    printf("FCFS Disk Scheduling Algorithm\n");
    printf("Sequence: %d ", curr_track);

    for (i = 0; i < num_requests; i++) {
        int distance = abs(requests[i] - curr_track);
        total_movement += distance;
        curr_track = requests[i];
        printf("%d ", curr_track);
    }

    printf("\nTotal Head Movement: %d\n\n", total_movement);
}

void sstf(int requests[], int num_requests, int head) {
    int total_movement = 0;
    int curr_track = head;
    bool visited[MAX_REQUESTS] = { false };
    int i, j;

    printf("SSTF Disk Scheduling Algorithm\n");
    printf("Sequence: %d ", curr_track);

    for (i = 0; i < num_requests; i++) {
        int min_distance = INT_MAX;
        int next_track;

        for (j = 0; j < num_requests; j++) {
            if (!visited[j]) {
                int distance = abs(requests[j] - curr_track);
                if (distance < min_distance) {
                    min_distance = distance;
                    next_track = requests[j];
                }
            }
        }

        visited[next_track] = true;
        total_movement += min_distance;
        curr_track = next_track;
        printf("%d ", curr_track);
    }

    printf("\nTotal Head Movement: %d\n\n", total_movement);
}

void scan(int requests[], int num_requests, int head, int num_tracks) {
    int total_movement = 0;
    int curr_track = head;
    int i, j;
    int direction = 1;

    printf("SCAN Disk Scheduling Algorithm\n");
    printf("Sequence: %d ", curr_track);

    while (direction) {
        direction = 0;

        for (i = 0; i < num_requests; i++) {
            if ((requests[i] < curr_track && direction == -1) ||
                (requests[i] > curr_track && direction == 1)) {
                continue;
            }

            if (requests[i] > num_tracks) {
                continue;
            }

            total_movement += abs(requests[i] - curr_track);
            curr_track = requests[i];
            printf("%d ", curr_track);
            requests[i] = -1;
            direction = 1;
        }

        if (direction) {
            direction = -1;
        }
    }

    printf("\nTotal Head Movement: %d\n\n", total_movement);
}

void cscan(int requests[], int num_requests, int head, int num_tracks) {
    int total_movement = 0;
    int curr_track = head;
    int i, j;

    printf("C-SCAN Disk Scheduling Algorithm\n");
    printf("Sequence: %d ", curr_track);

    for (i = 0; i < num_requests; i++) {
        if (requests[i] < curr_track) {
            continue;
        }

        total_movement += abs(requests[i] - curr_track);
        curr_track = requests[i];
        printf("%d ", curr_track);
        requests[i] = -1;
    }

    total_movement += abs(num_tracks - curr_track);
    curr_track = 0;
    printf("%d ", curr_track);

    for (i = 0; i < num_requests; i++) {
        if (requests[i] == -1) {
            continue;
        }

        total_movement += abs(requests[i] - curr_track);
        curr_track = requests[i];
        printf("%d ", curr_track);
    }

    printf("\nTotal Head Movement: %d\n\n", total_movement);
}

void look(int requests[], int num_requests, int head) {
    int total_movement = 0;
    int curr_track = head;
    bool visited[MAX_REQUESTS] = { false };
    int i, j;
    int direction = 1;

    printf("LOOK Disk Scheduling Algorithm\n");
    printf("Sequence: %d ", curr_track);

    while (direction) {
        direction = 0;

        for (i = 0; i < num_requests; i++) {
            if ((requests[i] < curr_track && direction == -1) ||
                (requests[i] > curr_track && direction == 1)) {
                continue;
            }

            total_movement += abs(requests[i] - curr_track);
            curr_track = requests[i];
            printf("%d ", curr_track);
            visited[i] = true;
            direction = 1;
        }

        if (direction) {
            direction = -1;
        }
    }

    printf("\nTotal Head Movement: %d\n\n", total_movement);
}

void clook(int requests[], int num_requests, int head) {
    int total_movement = 0;
    int curr_track = head;
    int i, j;

    printf("C-LOOK Disk Scheduling Algorithm\n");
    printf("Sequence: %d ", curr_track);

    for (i = 0; i < num_requests; i++) {
        if (requests[i] < curr_track) {
            continue;
        }

        total_movement += abs(requests[i] - curr_track);
        curr_track = requests[i];
        printf("%d ", curr_track);
        requests[i] = -1;
    }

    for (i = 0; i < num_requests; i++) {
        if (requests[i] == -1) {
            continue;
        }

        total_movement += abs(requests[i] - curr_track);
        curr_track = requests[i];
        printf("%d ", curr_track);
    }

    printf("\nTotal Head Movement: %d\n\n", total_movement);
}

int main() {
    int requests[MAX_REQUESTS];
    int num_requests, head, choice, i;

    printf("Enter the number of requests: ");
    scanf("%d", &num_requests);

    printf("Enter the request sequence: ");
    for (i = 0; i < num_requests; i++) {
        scanf("%d", &requests[i]);
    }

    printf("Enter the initial head position: ");
    scanf("%d", &head);

    printf("\n");

    while (1) {
        printf("Disk Scheduling Algorithms\n");
        printf("1. FCFS\n");
        printf("2. SSTF\n");
        printf("3. SCAN\n");
        printf("4. C-SCAN\n");
        printf("5. LOOK\n");
        printf("6. C-LOOK\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        printf("\n");

        switch (choice) {
            case 1:
                fcfs(requests, num_requests, head);
                break;
            case 2:
                sstf(requests, num_requests, head);
                break;
            case 3:
                scan(requests, num_requests, head, 199);
                break;
            case 4:
                cscan(requests, num_requests, head, 199);
                break;
            case 5:
                look(requests, num_requests, head);
                break;
            case 6:
                clook(requests, num_requests, head);
                break;
            case 7:
                exit(0);
            default:
                printf("Invalid choice! Please try again.\n\n");
        }
    }

    return 0;
}
