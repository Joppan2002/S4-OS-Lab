#include<stdio.h>

// Process structure
struct process {
    int pid;        // Process ID
    int burst_time; // Burst Time
    int arrival_time; // Arrival Time
    int priority;   // Priority
    int waiting_time; // Waiting Time
    int turnaround_time; // Turnaround Time
    int remaining_time; // Remaining Time
};

// Function to swap two processes
void swap(struct process* a, struct process* b) {
    struct process temp = *a;
    *a = *b;
    *b = temp;
}

// Function to sort processes by burst time
void sortByBurstTime(struct process* processes, int n) {
    int i, j;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (processes[j].burst_time > processes[j + 1].burst_time) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}

// Function to sort processes by arrival time
void sortByArrivalTime(struct process* processes, int n) {
    int i, j;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (processes[j].arrival_time > processes[j + 1].arrival_time) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}

// Function to sort processes by priority
void sortByPriority(struct process* processes, int n) {
    int i, j;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (processes[j].priority > processes[j + 1].priority) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }
}

// Function to implement FCFS algorithm
void FCFS(struct process* processes, int n) {
    int i;
    float total_waiting_time = 0, total_turnaround_time = 0;
    for (i = 0; i < n; i++) {
        if (i == 0) {
            processes[i].waiting_time = 0;
            processes[i].turnaround_time = processes[i].burst_time;
        } else {
            processes[i].waiting_time = processes[i - 1].turnaround_time;
            processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
        }
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }
    printf("\nFCFS Scheduling Algorithm\n");
    printf("PID\tBT\tAT\tWT\tTT\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t%d\t%d\t%d\n", processes[i].pid, processes[i].burst_time, processes[i].arrival_time, processes[i].waiting_time, processes[i].turnaround_time);
    }
    printf("Average Waiting Time: %.2f\n", total_waiting_time/n);
    printf("Average Turnaround Time: %.2f\n", total_turnaround_time/n);
}
void SJF(struct process* processes, int n) {
int i, j, currentTime = 0;
float total_waiting_time = 0, total_turnaround_time = 0;
sortByBurstTime(processes, n);
printf("\nSJF Scheduling Algorithm\n");
printf("PID\tBT\tAT\tWT\tTT\n");
for (i = 0; i < n; i++) {
if (i == 0) {
processes[i].waiting_time = 0;
processes[i].turnaround_time = processes[i].burst_time;
} else {
processes[i].waiting_time = currentTime - processes[i].arrival_time;
processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
}
currentTime += processes[i].burst_time;
total_waiting_time += processes[i].waiting_time;
total_turnaround_time += processes[i].turnaround_time;
printf("%d\t%d\t%d\t%d\t%d\n", processes[i].pid, processes[i].burst_time, processes[i].arrival_time, processes[i].waiting_time, processes[i].turnaround_time);
}
printf("Average Waiting Time: %.2f\n", total_waiting_time/n);
printf("Average Turnaround Time: %.2f\n", total_turnaround_time/n);
}

// Function to implement non-preemptive priority algorithm
void nonPreemptivePriority(struct process* processes, int n) {
int i, j, currentTime = 0;
float total_waiting_time = 0, total_turnaround_time = 0;
sortByPriority(processes, n);
printf("\nNon-Preemptive Priority Scheduling Algorithm\n");
printf("PID\tBT\tAT\tWT\tTT\n");
for (i = 0; i < n; i++) {
if (i == 0) {
processes[i].waiting_time = 0;
processes[i].turnaround_time = processes[i].burst_time;
} else {
processes[i].waiting_time = currentTime - processes[i].arrival_time;
processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
}
currentTime += processes[i].burst_time;
total_waiting_time += processes[i].waiting_time;
total_turnaround_time += processes[i].turnaround_time;
printf("%d\t%d\t%d\t%d\t%d\n", processes[i].pid, processes[i].burst_time, processes[i].arrival_time, processes[i].waiting_time, processes[i].turnaround_time);
}
printf("Average Waiting Time: %.2f\n", total_waiting_time/n);
printf("Average Turnaround Time: %.2f\n", total_turnaround_time/n);
}

// Function to implement round robin algorithm
void roundRobin(struct process* processes, int n, int time_quantum) {
int i, j, currentTime = 0;
float total_waiting_time = 0, total_turnaround_time = 0;
int* remaining_time = malloc(n * sizeof(int));
for (i = 0; i < n; i++) {
remaining_time[i] = processes[i].burst_time;
}
printf("\nRound Robin Scheduling Algorithm (TQ = %d)\n", time_quantum);
printf("PID\tBT\tAT\tWT\tTT\n");
while (1) {
int allDone = 1;
for (i = 0; i < n; i++) {
if (remaining_time[i] > 0) {
allDone = 0;
if (remaining_time[i] <= time_quantum) {
                    currentTime += remaining_time[i];
                processes[i].waiting_time = currentTime - processes[i].burst_time - processes[i].arrival_time;
                processes[i].turnaround_time = processes[i].waiting_time + processes[i].burst_time;
                total_waiting_time += processes[i].waiting_time;
                total_turnaround_time += processes[i].turnaround_time;
                remaining_time[i] = 0;
                printf("%d\t%d\t%d\t%d\t%d\n", processes[i].pid, processes[i].burst_time, processes[i].arrival_time, processes[i].waiting_time, processes[i].turnaround_time);
            } else {
                currentTime += time_quantum;
                remaining_time[i] -= time_quantum;
            }
        }
    }
    if (allDone == 1) {
        break;
    }
}
printf("Average Waiting Time: %.2f\n", total_waiting_time/n);
printf("Average Turnaround Time: %.2f\n", total_turnaround_time/n);
free(remaining_time);
}

int main() {
int n, i, choice, time_quantum;
printf("Enter the number of processes: ");
scanf("%d", &n);
struct process* processes = malloc(n * sizeof(struct process));
printf("Enter the PID, Burst Time, and Arrival Time of each process:\n");
for (i = 0; i < n; i++) {
printf("Process %d: ", i+1);
scanf("%d %d %d", &processes[i].pid, &processes[i].burst_time, &processes[i].arrival_time);
processes[i].priority = 0;
processes[i].waiting_time = 0;
processes[i].turnaround_time = 0;
}
while (1) {
printf("\nEnter your choice:\n1. FCFS\n2. SJF\n3. Non-Preemptive Priority\n4. Round Robin\n5. Exit\n");
scanf("%d", &choice);
switch (choice) {
case 1: FCFS(processes, n);
break;
case 2: SJF(processes, n);
break;
case 3: nonPreemptivePriority(processes, n);
break;
case 4: printf("Enter the time quantum: ");
scanf("%d", &time_quantum);
roundRobin(processes, n, time_quantum);
break;
case 5: free(processes);
exit(0);
default: printf("Invalid choice. Please try again.\n");
}
}
return 0;
}
